class ConvNeuralNet(nn.Module):
    def __init__(self, in_channel, num_classes):
        # It does something with the first layer on the first iteration
        # Applied more convolution layers to check
        super(ConvNeuralNet, self).__init__()
        self.conv1 = nn.Conv1d(in_channels=in_channel, out_channels=180 - 5 + 1, kernel_size=21, stride=3)
        self.pool = nn.MaxPool1d(2)
        self.conv2 = nn.Conv1d(in_channels=180 - 5 + 1, out_channels=64, kernel_size=21, stride=3)
        self.conv3 = nn.Conv1d(in_channels=64, out_channels=32, kernel_size=21, stride=3)
        self.conv4 = nn.Conv1d(in_channels=32, out_channels=16, kernel_size=21, stride=3)
        self.conv5 = nn.Conv1d(in_channels=16, out_channels=8, kernel_size=21, stride=3)
        self.conv6 = nn.Conv1d(in_channels=8, out_channels=5, kernel_size=21, stride=3)
        self.fc1 = nn.Linear(1, num_classes)

    def forward(self, x):
        # print(x)
        x = F.relu(self.conv1(x))
        x = self.pool(x)
        x = F.relu(self.conv2(x))
        x = self.pool(x)
        # x = x.reshape(x.shape[0], -1)
        x = self.fc1(x)

        return x

    def backward(self, x):
        pass


class Residual(nn.Module):  # @save
    """The Residual block of ResNet."""

    def __init__(self, num_channels, use_1x1conv=False, strides=1):
        super().__init__()
        self.conv1 = nn.LazyConv1d(num_channels, kernel_size=3, padding=1,
                                   stride=strides)
        self.conv2 = nn.LazyConv1d(num_channels, kernel_size=3, padding=1)
        if use_1x1conv:
            self.conv3 = nn.LazyConv1d(num_channels, kernel_size=1,
                                       stride=strides)
        else:
            self.conv3 = None
        self.bn1 = nn.LazyBatchNorm1d()
        self.bn2 = nn.LazyBatchNorm1d()

    def forward(self, X):
        Y = F.relu(self.bn1(self.conv1(X)))
        Y = self.bn2(self.conv2(Y))
        if self.conv3:
            X = self.conv3(X)
        Y += X
        return F.relu(Y)


class ResNet(nn.Module):
    def __init__(self, arch, lr=LEARNING_RATE, num_classes=5):
        super(ResNet, self).__init__()
        # self.save_hyperparameters()
        self.net = nn.Sequential(self.b1())
        for i, b in enumerate(arch):
            self.net.add_module(f'b{i + 2}', self.block(*b, first_block=(i == 0)))
        self.net.add_module('last', nn.Sequential(
            nn.AdaptiveAvgPool1d(1), nn.Flatten(),
            nn.LazyLinear(num_classes)))

    def b1(self):
        return nn.Sequential(
            nn.LazyConv1d(2, kernel_size=7, stride=2, padding=3),
            nn.LazyBatchNorm1d(), nn.ReLU(),
            nn.MaxPool1d(kernel_size=3, stride=2, padding=1))

    def block(self, num_residuals, num_channels, first_block=False):
        blk = []
        for i in range(num_residuals):
            if i == 0 and not first_block:
                blk.append(Residual(num_channels, use_1x1conv=True, strides=2))
            else:
                blk.append(Residual(num_channels))
        return nn.Sequential(*blk)

